/* ===========================
    BI·∫æN TO√ÄN C·ª§C & WEBSOCKET
=========================== */
const selectedSeats = []; // Gh·∫ø ch·ªçn c·ªßa client hi·ªán t·∫°i
let allSelectedSeats = []; // Danh s√°ch gh·∫ø ƒë√£ ch·ªçn to√†n c·ª•c
const seatTimers = new Map(); // L∆∞u timer gi·ªØ gh·∫ø
let stompClient = null; // WebSocket client
let clientId = "client_" + Math.floor(Math.random() * 1000); // ID duy nh·∫•t cho client

/* ===========================
    K·∫æT N·ªêI WEBSOCKET
=========================== */
function connectWebSocket() {
    console.log("üõ†Ô∏è ƒêang k·∫øt n·ªëi WebSocket...");

    const socket = new SockJS('/ws-seat'); // Endpoint WebSocket t·ª´ backend
    stompClient = Stomp.over(socket);

    stompClient.connect({}, () => {
        console.log("‚úÖ WebSocket k·∫øt n·ªëi th√†nh c√¥ng!");

        // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ gh·∫ø
        stompClient.send("/app/seat/requestStatus", {}, {});

        // L·∫Øng nghe c·∫≠p nh·∫≠t gh·∫ø theo th·ªùi gian th·ª±c t·ª´ t·∫•t c·∫£ c√°c client
        stompClient.subscribe('/topic/seats', (message) => {
            const seatUpdate = JSON.parse(message.body);
            console.log(`üéØ Gh·∫ø c·∫≠p nh·∫≠t: ${seatUpdate.seatId} - ${seatUpdate.status}`);
            updateSeatRealTime(seatUpdate);
        });

        // L·∫Øng nghe tr·∫°ng th√°i gh·∫ø khi client t·∫£i l·∫°i trang
        stompClient.subscribe('/topic/seatStatus', (message) => {
            const allSeatStatus = JSON.parse(message.body);
            console.log("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ gh·∫ø t·ª´ server...");
            updateAllSeats(allSeatStatus);
        });
    }, (error) => {
        console.error("‚ùå K·∫øt n·ªëi WebSocket th·∫•t b·∫°i: ", error);
    });
}

/* ===========================
    G·ª¨I & NH·∫¨N TR·∫†NG TH√ÅI GH·∫æ
=========================== */
function sendSeatUpdate(seatId, status) {
    if (stompClient) {
        console.log(`üì§ G·ª≠i tr·∫°ng th√°i: ${seatId} - ${status}`);
        stompClient.send("/app/seat/update", {}, JSON.stringify({
            seatId: seatId,
            status: status,
            updatedBy: clientId
        }));
    }
}

function updateSeatRealTime(seatUpdate) {
    const seat = document.querySelector(`[data-seat-id='${seatUpdate.seatId}']`);
    if (seat) {
        if (seatUpdate.status === 'selected') {
            seat.classList.add('selected');
            seat.setAttribute('data-status', 'selected');
            seat.setAttribute('data-updated-by', seatUpdate.updatedBy);
        } else {
            seat.classList.remove('selected');
            seat.setAttribute('data-status', 'available');
            seat.removeAttribute('data-updated-by');
        }
    }
    // C·∫≠p nh·∫≠t danh s√°ch gh·∫ø ƒë√£ ch·ªçn to√†n c·ª•c
    if (seatUpdate.status === 'selected' && !allSelectedSeats.includes(seatUpdate.seatId)) {
        allSelectedSeats.push(seatUpdate.seatId);
    } else if (seatUpdate.status === 'available') {
        allSelectedSeats = allSelectedSeats.filter(seat => seat !== seatUpdate.seatId);
    }
}

function updateAllSeats(allSeatStatus) {
    Object.values(allSeatStatus).forEach(seatUpdate => {
        const seat = document.querySelector(`[data-seat-id='${seatUpdate.seatId}']`);
        if (seat) {
            if (seatUpdate.status === 'selected') {
                seat.classList.add('selected');
                seat.setAttribute('data-status', 'selected');
                seat.setAttribute('data-updated-by', seatUpdate.updatedBy);
            } else {
                seat.classList.remove('selected');
                seat.setAttribute('data-status', 'available');
                seat.removeAttribute('data-updated-by');
            }
        }
    });
    console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø tr√™n giao di·ªán.");
}

/* ===========================
    X·ª¨ L√ù CH·ªåN GH·∫æ
=========================== */
function selectSeat(seat) {
    const seatId = seat.getAttribute('data-seat-id');
    const seatName = seat.innerText;
    const status = seat.getAttribute('data-status');

    if (status === 'selected' && seat.getAttribute('data-updated-by') === clientId) {
        resetSeat(seat, seatId);
    } else if (status === 'available') {
        console.log(`‚úÖ Ch·ªçn gh·∫ø: ${seatName}`);
        seat.classList.add('selected');
        seat.setAttribute('data-status', 'selected');
        seat.setAttribute('data-updated-by', clientId);
        selectedSeats.push(seatName);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø
        sendSeatUpdate(seatId, 'selected');
        startSeatTimer(seatId, seat);
    }

    updateSelectedSeatsDisplay();
    updateTotalAmount();
}

function startSeatTimer(seatId, seat) {
    // Ng·ª´ng kh·ªüi t·∫°o timer m·ªõi n·∫øu gh·∫ø ƒë√£ c√≥ timer
    if (seatTimers.has(seatId)) return;

    console.log(`‚è≥ Gi·ªØ gh·∫ø: ${seat.innerText} trong 2 ph√∫t.`);

    // T·∫°o timer m·ªõi, s·∫Ω h·∫øt h·∫°n sau 2 ph√∫t (120,000 milliseconds)
    const timer = setTimeout(() => {
        alert(`‚è∞ Gh·∫ø ${seat.innerText} ƒë√£ h·∫øt th·ªùi gian gi·ªØ!`);
        resetSeat(seat, seatId); // Reset gh·∫ø khi h·∫øt th·ªùi gian gi·ªØ
    }, 5 * 60 * 1000);

    // L∆∞u timer v√†o trong seatTimers map v·ªõi seatId l√† kh√≥a
    seatTimers.set(seatId, timer);
}

function resetSeat(seat, seatId) {
    console.log(`üîÑ H·ªßy ch·ªçn gh·∫ø: ${seat.innerText}`);

    // X√≥a gh·∫ø kh·ªèi danh s√°ch gh·∫ø ƒë√£ ch·ªçn
    const seatName = seat.innerText;
    const index = selectedSeats.indexOf(seatName);
    if (index > -1) selectedSeats.splice(index, 1);

    // Reset tr·∫°ng th√°i c·ªßa gh·∫ø v√† x√≥a timer
    seat.classList.remove('selected');
    seat.setAttribute('data-status', 'available');
    seat.removeAttribute('data-updated-by');

    // G·ª≠i t√≠n hi·ªáu c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø qua WebSocket
    sendSeatUpdate(seatId, 'available'); // <--- Th√™m d√≤ng n√†y

    // X√≥a timer n·∫øu t·ªìn t·∫°i
    if (seatTimers.has(seatId)) {
        clearTimeout(seatTimers.get(seatId));
        seatTimers.delete(seatId); // X√≥a timer kh·ªèi seatTimers map
    }

    // C·∫≠p nh·∫≠t giao di·ªán cho danh s√°ch gh·∫ø ƒë√£ ch·ªçn v√† t·ªïng s·ªë ti·ªÅn
    updateSelectedSeatsDisplay();
    updateTotalAmount();
}



/* ===========================
    C·∫¨P NH·∫¨T GIAO DI·ªÜN
=========================== */
function updateSelectedSeatsDisplay() {
    const display = document.getElementById('selectedSeatsDisplay');
    display.innerText = selectedSeats.length === 0
        ? 'Ch∆∞a c√≥ gh·∫ø n√†o ƒë∆∞·ª£c ch·ªçn.'
        : selectedSeats.join(', ');
}

function updateTotalAmount() {
    const totalAmountDisplay = document.getElementById('totalAmount');
    let total = 0;

    selectedSeats.forEach(seatName => {
        const seat = Array.from(document.getElementsByClassName('seat')).find(s => s.innerText === seatName);
        const seatPrice = parseInt(seat?.value);
        if (!isNaN(seatPrice)) total += seatPrice;
    });

    totalAmountDisplay.innerText = total.toLocaleString('vi-VN') + ' VNƒê';
}

/* ===========================
    X·ª¨ L√ù X√ÅC NH·∫¨N ƒê·∫∂T V√â
=========================== */
function confirmBooking() {
    if (selectedSeats.length === 0) {
        Swal.fire({
            title: "Th√¥ng b√°o!",
            text: "Vui l√≤ng ch·ªçn gh·∫ø tr∆∞·ªõc khi ƒë·∫∑t v√©!",
            icon: "error"
        });
        return;
    }
    const comboModal = new bootstrap.Modal(document.getElementById('comboModal'));
    comboModal.show();
}

/* ===========================
    KH·ªûI ƒê·ªòNG
=========================== */
document.addEventListener('DOMContentLoaded', connectWebSocket);
document.getElementById("backButton").addEventListener("click", () => window.history.back());

function submitBooking(button) {
    // L∆∞u gh·∫ø ƒë√£ ch·ªçn v√†o selectedSeatsClient
    const selectedSeat = [...document.querySelectorAll('.selected')]
        .filter(seat => seat.getAttribute('data-updated-by') === clientId) // L·ªçc gh·∫ø theo clientId
        .map(seat => {
            return {
                seatId: seat.getAttribute('data-seat-id'),
                seatName: seat.innerText
            };
        });


    // L·∫•y form t·ª´ n√∫t ƒë∆∞·ª£c nh·∫•n
    const form = button.closest('form');

    // L·∫•y showtimeId t·ª´ input ·∫©n
    const showtimeIdInput = form.querySelector('input[name="showtimeId"]');
    const showtimeId = showtimeIdInput ? showtimeIdInput.value : null;

    // L·∫•y th√¥ng tin s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng
    const products = [...document.querySelectorAll('.draggable-content')].map(row => {
        const quantityInput = row.querySelector('.comboQuantity');
        const quantity = parseInt(quantityInput.value) || 0;
        const productIdElement = row.querySelector('.product-id');

        const productId = productIdElement ? productIdElement.innerText : null;

        return { productId, quantity };
    }).filter(product => product.quantity > 0);

    // G√°n d·ªØ li·ªáu v√†o c√°c th·∫ª input hidden ƒë·ªÉ g·ª≠i th√¥ng tin client v√† gh·∫ø
    document.getElementById('selectedSeats').value = JSON.stringify(selectedSeat);
    document.getElementById('products').value = JSON.stringify(products);

    // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i form
    console.log('Selected Seats:', document.getElementById('selectedSeats').value);
    console.log('Products:', document.getElementById('products').value);

    // G·ª≠i form
    form.submit();
}


/*JS MODAL*/
// L·∫•y c√°c ph·∫ßn t·ª≠ s·∫£n ph·∫©m v√† t·ªïng ti·ªÅn combo
const products = document.querySelectorAll('.draggable-content');
const comboTotalAmountElement = document.getElementById('comboTotalAmount1');

// H√†m c·∫≠p nh·∫≠t t·ªïng s·ªë ti·ªÅn c·ªßa m·ªói s·∫£n ph·∫©m
function updateProductTotalAmount(productElement) {
    const quantityInput = productElement.querySelector('input.comboQuantity');
    const priceElement = productElement.querySelector('p.price');
    const totalAmountElement = productElement.querySelector('div.comboTotalAmount');

    // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p √¥ nh·∫≠p s·ªë l∆∞·ª£ng b·ªã tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá
    const quantity = parseInt(quantityInput.value, 10) || 0;
    const price = parseFloat(priceElement.dataset.price);

    if (isNaN(price)) {
        totalAmountElement.textContent = '0 VND';
        return;
    }

    const totalAmount = quantity * price; // nh√¢n v·ªõi 1000 cho ƒë∆°n v·ªã ti·ªÅn
    totalAmountElement.textContent = formatPrice(totalAmount);
    console.log()
}

// H√†m c·∫≠p nh·∫≠t t·ªïng ti·ªÅn c·ªßa t·∫•t c·∫£ c√°c s·∫£n ph·∫©m (grand total)
function updateGrandTotal() {
    let grandTotal = 0;
    products.forEach((productElement) => {
        const totalAmountElement = productElement.querySelector('div.comboTotalAmount');
        const totalAmount = parseFloat(totalAmountElement.textContent.replace(/\D/g, ''));
        if (!isNaN(totalAmount)) {
            grandTotal += totalAmount;
        }
    });
    comboTotalAmountElement.textContent = formatPrice(grandTotal);
}

// H√†m ƒë·ªãnh d·∫°ng gi√° ti·ªÅn (th√™m d·∫•u ph·∫©y v√† ch·∫•m)
function formatPrice(price) {
    return price.toLocaleString('vi-VN' , {
        style: 'currency',
        currency: 'VND',
        minimumFractionDigits: 0,
    });
}

// H√†m ki·ªÉm tra v√† x√°c th·ª±c gi√° tr·ªã nh·∫≠p v√†o
function validateInput(inputElement) {
    // L·∫•y gi√° tr·ªã t·ª´ input
    let value = inputElement.value.trim();

    // Ki·ªÉm tra n·∫øu gi√° tr·ªã l√† m·ªôt s·ªë v√† kh√¥ng √¢m
    if (value === "" || isNaN(value) || Number(value) < 0) {
        inputElement.value = 0; // N·∫øu kh√¥ng h·ª£p l·ªá, g√°n l·∫°i gi√° tr·ªã 0
    } else {
        inputElement.value = Math.max(0, Number(value)); // G√°n gi√° tr·ªã h·ª£p l·ªá (kh√¥ng √¢m)
    }

    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn s·∫£n ph·∫©m
    const productElement = inputElement.closest('.draggable-content');
    updateProductTotalAmount(productElement);
    updateGrandTotal();
}

// Th√™m s·ª± ki·ªán cho c√°c n√∫t tƒÉng v√† gi·∫£m s·ªë l∆∞·ª£ng
products.forEach((productElement) => {
    const quantityInput = productElement.querySelector('input.comboQuantity');
    const priceElement = productElement.querySelector('p.price');
    const btnIncrease = productElement.querySelector('.btn-increase');
    const btnDecrease = productElement.querySelector('.btn-decrease');

    // N√∫t tƒÉng s·ªë l∆∞·ª£ng
    btnIncrease.addEventListener('click', () => {
        quantityInput.value = parseInt(quantityInput.value, 10) + 1;
        const price = parseFloat(priceElement.textContent.replace(' VND', '').replace('.', '').replace(',', '.')) || 0; // L·∫•y gi√° t·ª´ priceElement
        priceElement.dataset.price = price; // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o data-price
        updateProductTotalAmount(productElement);
        updateGrandTotal();
    });

    // N√∫t gi·∫£m s·ªë l∆∞·ª£ng
    btnDecrease.addEventListener('click', () => {
        let currentValue = parseInt(quantityInput.value, 10);
        if (currentValue > 0) {
            quantityInput.value = currentValue - 1;
        }
        const price = parseFloat(priceElement.textContent.replace(' VND', '').replace('.', '').replace(',', '.')) || 0; // L·∫•y gi√° t·ª´ priceElement
        priceElement.dataset.price = price; // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o data-price
        updateProductTotalAmount(productElement);
        updateGrandTotal();
    });

    // S·ª± ki·ªán thay ƒë·ªïi gi√° tr·ªã √¥ input
    quantityInput.addEventListener('input', () => {
        const quantity = parseInt(quantityInput.value, 10) || 0;
        const price = parseFloat(priceElement.textContent.replace(' VND', '').replace('.', '').replace(',', '.')) || 0; // L·∫•y gi√° t·ª´ priceElement
        priceElement.dataset.price = price; // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o data-price
        updateProductTotalAmount(productElement);
        updateGrandTotal();
    });
});
/*JS MODAL*/
